---
import "../styles/global.css";
import "@fontsource-variable/jetbrains-mono";
import type { ImageMetadata } from "astro";
import clsx from "clsx";
import github from "../assets/github.svg";
import xIcon from "../assets/x.svg";

type Props = {
  title?: string;
  description?: string;
  keywords?: Array<string>;
  ogImage?: string;
};

type Social = {
  url: string;
  icon: ImageMetadata;
  name: string;
};

const socials: Array<Social> = [
  {
    name: "GitHub",
    icon: github,
    url: "https://github.com/maciejgarncarski"
  },
  {
    name: "X",
    icon: xIcon,
    url: "https://x.com/MGarncarski"
  }
];

type Link = {
  url: string;
  text: string;
};

const navigationData: Array<Link> = [
  {
    text: "O mnie",
    url: "/"
  },
  {
    text: "Projekty",
    url: "/projekty"
  },
  {
    text: "Kontakt",
    url: "/kontakt"
  },
  {
    text: "Blog",
    url: "/blog"
  }
];

const defaultTitle = "Maciej Garncarski";

const defaultDescription =
  "SpecjalizujÄ™ siÄ™ w tworzeniu nowoczesnych i wydajnych aplikacji internetowych. Moje doÅ›wiadczenie obejmuje pracÄ™ z technologiami frontendowymi i backendowymi, co pozwala mi na dostarczanie kompleksowych rozwiÄ…zaÅ„ dla klientÃ³w.";

const defaultKeywords = [
  "Strony internetowe",
  "Fullstack",
  "developer",
  "internet",
  "frontend",
  "backend",
  "postgres",
  "redis",
  "react",
  "html",
  "css",
  "js",
  "ts",
  "tailwind",
  "blog",
  "nginx",
  "linux"
];

const {
  description = defaultDescription,
  title = defaultTitle,
  keywords = defaultKeywords,
  ogImage
} = Astro.props;

const canonicalUrl = "https://maciejgarncarski.pl";

const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, "");
const subpath = pathname.match(/[^\/]+/g);
---

<!doctype html>
<html lang="pl">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link
      rel="icon"
      href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ’»</text></svg>"
    />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords.join(", ")} />
    <link rel="canonical" href={canonicalUrl} />

    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalUrl} />
    {ogImage && <meta property="og:image" content={ogImage} />}

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    {ogImage && <meta name="twitter:image" content={ogImage} />}
    <meta name="og:title" content={title} />

    <title>{title}</title>
    <link rel="sitemap" href="/sitemap-index.xml" />
    <script is:inline>
      document.documentElement.classList.toggle(
        "dark",
        localStorage.theme === "dark" ||
          (!("theme" in localStorage) &&
            window.matchMedia("(prefers-color-scheme: dark)").matches)
      );
      localStorage.theme = "light";
      localStorage.theme = "dark";
      localStorage.removeItem("theme");

      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", (event) => {
          document.documentElement.classList.toggle("dark", event.matches);
        });
    </script>
  </head>
  <body class="text-foreground bg-background p-1 lg:p-0">
    <div class="mx-auto max-w-[50rem] border-2 lg:my-10">
      <header
        class="text-primary-foreground flex flex-col items-center gap-1 border-b-2 p-3 text-center md:flex-row md:gap-4 md:p-4 md:text-left">
        <h1 class="text-2xl uppercase">Maciej Garncarski</h1>
        <span class="hidden md:inline">&#x2022;</span>
        <p class="uppecase text-2xl">Fullstack developer</p>
      </header>
      <nav class="flex items-center border-b-2">
        <ul class="flex flex-wrap gap-x-8 gap-y-4 p-4">
          {
            navigationData.map((n) => {
              const isActive =
                n.url === pathname || n.url === "/" + (subpath?.[0] || "");

              const isBlogPage = n.url === "/blog/";

              const isBlogPageActive =
                isBlogPage && Astro.url.pathname.startsWith("/blog/");

              return (
                <li>
                  <a
                    href={n.url}
                    class={clsx(
                      isActive || isBlogPageActive
                        ? "text-foreground font-bold"
                        : "text-muted-foreground"
                    )}>
                    {n.text}
                  </a>
                </li>
              );
            })
          }
        </ul>
      </nav>
      <main class="min-h-[30rem] border-b-2">
        <slot />
      </main>

      <footer class="flex items-center gap-6 p-4">
        {
          socials.map((s) => {
            return (
              <a href={s.url} target="_blank" class="w-fit">
                <img
                  src={s.icon.src}
                  alt=""
                  width="30"
                  height="30"
                  class="dark:invert-100"
                />
                <span class="sr-only">{s.name}</span>
              </a>
            );
          })
        }
        <p class="ml-auto text-right text-xs md:text-sm">
          &copy; 2025 Maciej Garncarski. <br /> Wszelkie prawa zastrzeÅ¼one.
        </p>
      </footer>
    </div>
  </body>
</html>
